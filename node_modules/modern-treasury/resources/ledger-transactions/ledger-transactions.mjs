// File generated from our OpenAPI spec by Stainless.
import { APIResource } from 'modern-treasury/resource';
import { isRequestOptions } from 'modern-treasury/core';
import { Versions } from './versions.mjs';
import * as API from './index.mjs';
import { Page } from 'modern-treasury/pagination';
export class LedgerTransactions extends APIResource {
  constructor() {
    super(...arguments);
    this.versions = new Versions(this.client);
  }
  /**
   * Create a ledger transaction.
   */
  create(params, options) {
    const { 'Idempotency-Key': idempotencyKey, ...body } = params;
    return this.post('/api/ledger_transactions', {
      body,
      ...options,
      headers: {
        'Idempotency-Key': idempotencyKey || '',
        ...(options === null || options === void 0 ? void 0 : options.headers),
      },
    });
  }
  /**
   * Get details on a single ledger transaction.
   */
  retrieve(id, options) {
    return this.get(`/api/ledger_transactions/${id}`, options);
  }
  update(id, body = {}, options) {
    if (isRequestOptions(body)) {
      return this.update(id, {}, body);
    }
    return this.patch(`/api/ledger_transactions/${id}`, { body, ...options });
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this.getAPIList('/api/ledger_transactions', LedgerTransactionsPage, { query, ...options });
  }
  createReversal(ledgerTransactionId, body = {}, options) {
    if (isRequestOptions(body)) {
      return this.createReversal(ledgerTransactionId, {}, body);
    }
    return this.post(`/api/ledger_transactions/${ledgerTransactionId}/reversal`, { body, ...options });
  }
}
export class LedgerTransactionsPage extends Page {}
(function (LedgerTransactions) {
  LedgerTransactions.Versions = API.Versions;
  LedgerTransactions.LedgerTransactionVersionsPage = API.LedgerTransactionVersionsPage;
})(LedgerTransactions || (LedgerTransactions = {}));
//# sourceMappingURL=ledger-transactions.mjs.map
