'use strict';
// File generated from our OpenAPI spec by Stainless.
Object.defineProperty(exports, '__esModule', { value: true });
exports.LedgerAccountCategoriesPage = exports.LedgerAccountCategories = void 0;
const resource_1 = require('modern-treasury/resource');
const core_1 = require('modern-treasury/core');
const pagination_1 = require('modern-treasury/pagination');
class LedgerAccountCategories extends resource_1.APIResource {
  /**
   * Create a ledger account category.
   */
  create(params, options) {
    const { 'Idempotency-Key': idempotencyKey, ...body } = params;
    return this.post('/api/ledger_account_categories', {
      body,
      ...options,
      headers: {
        'Idempotency-Key': idempotencyKey || '',
        ...(options === null || options === void 0 ? void 0 : options.headers),
      },
    });
  }
  retrieve(id, query = {}, options) {
    if ((0, core_1.isRequestOptions)(query)) {
      return this.retrieve(id, {}, query);
    }
    return this.get(`/api/ledger_account_categories/${id}`, { query, ...options });
  }
  update(id, params = {}, options) {
    if ((0, core_1.isRequestOptions)(params)) {
      return this.update(id, {}, params);
    }
    const { balances, ...body } = params;
    return this.patch(`/api/ledger_account_categories/${id}`, { query: { balances }, body, ...options });
  }
  list(query = {}, options) {
    if ((0, core_1.isRequestOptions)(query)) {
      return this.list({}, query);
    }
    return this.getAPIList('/api/ledger_account_categories', LedgerAccountCategoriesPage, {
      query,
      ...options,
    });
  }
  del(id, body = {}, options) {
    if ((0, core_1.isRequestOptions)(body)) {
      return this.del(id, {}, body);
    }
    const { balances } = body;
    return this.delete(`/api/ledger_account_categories/${id}`, { query: { balances }, ...options });
  }
  /**
   * Add a ledger account category to an account.
   */
  addLedgerAccount(id, ledgerAccountId, options) {
    return this.put(`/api/ledger_account_categories/${id}/ledger_accounts/${ledgerAccountId}`, {
      ...options,
      headers: { Accept: '', ...(options === null || options === void 0 ? void 0 : options.headers) },
    });
  }
  /**
   * Add a ledger account category to a ledger account category.
   */
  addNestedCategory(id, subCategoryId, options) {
    return this.put(`/api/ledger_account_categories/${id}/ledger_account_categories/${subCategoryId}`, {
      ...options,
      headers: { Accept: '', ...(options === null || options === void 0 ? void 0 : options.headers) },
    });
  }
  /**
   * Delete a ledger account category from an account.
   */
  removeLedgerAccount(id, ledgerAccountId, options) {
    return this.delete(`/api/ledger_account_categories/${id}/ledger_accounts/${ledgerAccountId}`, {
      ...options,
      headers: { Accept: '', ...(options === null || options === void 0 ? void 0 : options.headers) },
    });
  }
  /**
   * Delete a ledger account category from a ledger account category.
   */
  removeNestedCategory(id, subCategoryId, options) {
    return this.delete(`/api/ledger_account_categories/${id}/ledger_account_categories/${subCategoryId}`, {
      ...options,
      headers: { Accept: '', ...(options === null || options === void 0 ? void 0 : options.headers) },
    });
  }
}
exports.LedgerAccountCategories = LedgerAccountCategories;
class LedgerAccountCategoriesPage extends pagination_1.Page {}
exports.LedgerAccountCategoriesPage = LedgerAccountCategoriesPage;
(function (LedgerAccountCategories) {})(
  (LedgerAccountCategories = exports.LedgerAccountCategories || (exports.LedgerAccountCategories = {})),
);
//# sourceMappingURL=ledger-account-categories.js.map
