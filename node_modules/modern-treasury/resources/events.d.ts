import * as Core from 'modern-treasury/core';
import { APIResource } from 'modern-treasury/resource';
import * as API from './index.js';
import { Page, PageParams } from 'modern-treasury/pagination';
export declare class Events extends APIResource {
  /**
   * get event
   */
  retrieve(id: string, options?: Core.RequestOptions): Promise<Core.APIResponse<Event>>;
  /**
   * list events
   */
  list(query?: EventListParams, options?: Core.RequestOptions): Core.PagePromise<EventsPage>;
  list(options?: Core.RequestOptions): Core.PagePromise<EventsPage>;
}
export declare class EventsPage extends Page<Event> {}
type _EventsPage = EventsPage;
export interface Event {
  id: string;
  created_at: string;
  /**
   * The body of the event.
   */
  data: Record<string, unknown>;
  /**
   * The ID of the entity for the event.
   */
  entity_id: string;
  /**
   * The name of the event.
   */
  event_name: string;
  /**
   * The time of the event.
   */
  event_time: string;
  /**
   * This field will be true if this object exists in the live environment or false
   * if it exists in the test environment.
   */
  live_mode: boolean;
  object: string;
  /**
   * The type of resource for the event.
   */
  resource: string;
  updated_at: string;
}
export interface EventListParams extends PageParams {
  entity_id?: string;
  event_name?: string;
  /**
   * An inclusive upper bound for when the event occurred
   */
  event_time_end?: string;
  /**
   * An inclusive lower bound for when the event occurred
   */
  event_time_start?: string;
  resource?: string;
}
export declare namespace Events {
  export import Event = API.Event;
  type EventsPage = _EventsPage;
  export import EventListParams = API.EventListParams;
}
export {};
//# sourceMappingURL=events.d.ts.map
