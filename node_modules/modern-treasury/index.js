'use strict';
// File generated from our OpenAPI spec by Stainless.
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create ?
    function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          },
        };
      }
      Object.defineProperty(o, k2, desc);
    }
  : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create ?
    function (o, v) {
      Object.defineProperty(o, 'default', { enumerable: true, value: v });
    }
  : function (o, v) {
      o['default'] = v;
    });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
var _a;
Object.defineProperty(exports, '__esModule', { value: true });
exports.fileFromPath =
  exports.toFile =
  exports.UnprocessableEntityError =
  exports.PermissionDeniedError =
  exports.InternalServerError =
  exports.AuthenticationError =
  exports.BadRequestError =
  exports.RateLimitError =
  exports.ConflictError =
  exports.NotFoundError =
  exports.APIUserAbortError =
  exports.APIConnectionTimeoutError =
  exports.APIConnectionError =
  exports.APIError =
  exports.ModernTreasury =
    void 0;
const Core = __importStar(require('./core.js'));
const Pagination = __importStar(require('./pagination.js'));
const API = __importStar(require('./resources/index.js'));
const Errors = __importStar(require('./error.js'));
const Uploads = __importStar(require('./uploads.js'));
const qs = __importStar(require('qs'));
/** Instantiate the API Client. */
class ModernTreasury extends Core.APIClient {
  constructor(_b) {
    var _c;
    var {
      apiKey = Core.readEnv('MODERN_TREASURY_API_KEY'),
      organizationId = Core.readEnv('MODERN_TREASURY_ORGANIZATION_ID'),
      webhookKey = (_c = Core.readEnv('MODERN_TREASURY_WEBHOOK_KEY')) !== null && _c !== void 0 ? _c : null,
      ...opts
    } = _b === void 0 ? {} : _b;
    if (apiKey === undefined) {
      throw new Error(
        'The MODERN_TREASURY_API_KEY environment variable is missing or empty; either provide it, or instantiate the ModernTreasury client with an apiKey option, like new ModernTreasury({ apiKey: undefined }).',
      );
    }
    if (organizationId === undefined) {
      throw new Error(
        "The MODERN_TREASURY_ORGANIZATION_ID environment variable is missing or empty; either provide it, or instantiate the ModernTreasury client with an organizationId option, like new ModernTreasury({ organizationId: 'my-organization-ID' }).",
      );
    }
    const options = {
      apiKey,
      organizationId,
      webhookKey,
      baseURL: `https://app.moderntreasury.com`,
      ...opts,
    };
    super({
      baseURL: options.baseURL,
      timeout: options.timeout,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch,
    });
    this.connections = new API.Connections(this);
    this.counterparties = new API.Counterparties(this);
    this.events = new API.Events(this);
    this.expectedPayments = new API.ExpectedPayments(this);
    this.externalAccounts = new API.ExternalAccounts(this);
    this.incomingPaymentDetails = new API.IncomingPaymentDetails(this);
    this.invoices = new API.Invoices(this);
    this.documents = new API.Documents(this);
    this.accountCollectionFlows = new API.AccountCollectionFlows(this);
    this.accountDetails = new API.AccountDetails(this);
    this.routingDetails = new API.RoutingDetails(this);
    this.internalAccounts = new API.InternalAccounts(this);
    this.ledgers = new API.Ledgers(this);
    this.ledgerableEvents = new API.LedgerableEvents(this);
    this.ledgerAccountCategories = new API.LedgerAccountCategories(this);
    this.ledgerAccounts = new API.LedgerAccounts(this);
    this.ledgerAccountPayouts = new API.LedgerAccountPayouts(this);
    this.ledgerAccountStatements = new API.LedgerAccountStatements(this);
    this.ledgerEntries = new API.LedgerEntries(this);
    this.ledgerEventHandlers = new API.LedgerEventHandlers(this);
    this.ledgerTransactions = new API.LedgerTransactions(this);
    this.lineItems = new API.LineItems(this);
    this.paymentFlows = new API.PaymentFlows(this);
    this.paymentOrders = new API.PaymentOrders(this);
    this.paymentReferences = new API.PaymentReferences(this);
    this.returns = new API.Returns(this);
    this.transactions = new API.Transactions(this);
    this.validations = new API.Validations(this);
    this.paperItems = new API.PaperItems(this);
    this.webhooks = new API.Webhooks(this);
    this.virtualAccounts = new API.VirtualAccounts(this);
    this._options = options;
    this.idempotencyHeader = 'Idempotency-Key';
    this.apiKey = apiKey;
    this.organizationId = organizationId;
    this.webhookKey = webhookKey;
  }
  /**
   * A test endpoint often used to confirm credentials and headers are being passed
   * in correctly.
   */
  ping(options) {
    return this.get('/api/ping', options);
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders() {
    return {
      ...super.defaultHeaders(),
      ...this._options.defaultHeaders,
    };
  }
  authHeaders() {
    const credentials = `${this.organizationId}:${this.apiKey}`;
    const Authorization = `Basic ${Core.toBase64(credentials)}`;
    return { Authorization };
  }
  stringifyQuery(query) {
    return qs.stringify(query, { arrayFormat: 'repeat' });
  }
}
exports.ModernTreasury = ModernTreasury;
_a = ModernTreasury;
ModernTreasury.ModernTreasury = _a;
ModernTreasury.APIError = Errors.APIError;
ModernTreasury.APIConnectionError = Errors.APIConnectionError;
ModernTreasury.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
ModernTreasury.APIUserAbortError = Errors.APIUserAbortError;
ModernTreasury.NotFoundError = Errors.NotFoundError;
ModernTreasury.ConflictError = Errors.ConflictError;
ModernTreasury.RateLimitError = Errors.RateLimitError;
ModernTreasury.BadRequestError = Errors.BadRequestError;
ModernTreasury.AuthenticationError = Errors.AuthenticationError;
ModernTreasury.InternalServerError = Errors.InternalServerError;
ModernTreasury.PermissionDeniedError = Errors.PermissionDeniedError;
ModernTreasury.UnprocessableEntityError = Errors.UnprocessableEntityError;
(exports.APIError = Errors.APIError),
  (exports.APIConnectionError = Errors.APIConnectionError),
  (exports.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError),
  (exports.APIUserAbortError = Errors.APIUserAbortError),
  (exports.NotFoundError = Errors.NotFoundError),
  (exports.ConflictError = Errors.ConflictError),
  (exports.RateLimitError = Errors.RateLimitError),
  (exports.BadRequestError = Errors.BadRequestError),
  (exports.AuthenticationError = Errors.AuthenticationError),
  (exports.InternalServerError = Errors.InternalServerError),
  (exports.PermissionDeniedError = Errors.PermissionDeniedError),
  (exports.UnprocessableEntityError = Errors.UnprocessableEntityError);
exports.toFile = Uploads.toFile;
exports.fileFromPath = Uploads.fileFromPath;
(function (ModernTreasury) {
  // Helper functions
  ModernTreasury.toFile = Uploads.toFile;
  ModernTreasury.fileFromPath = Uploads.fileFromPath;
  ModernTreasury.Page = Pagination.Page;
  ModernTreasury.Connections = API.Connections;
  ModernTreasury.ConnectionsPage = API.ConnectionsPage;
  ModernTreasury.Counterparties = API.Counterparties;
  ModernTreasury.CounterpartiesPage = API.CounterpartiesPage;
  ModernTreasury.Events = API.Events;
  ModernTreasury.EventsPage = API.EventsPage;
  ModernTreasury.ExpectedPayments = API.ExpectedPayments;
  ModernTreasury.ExpectedPaymentsPage = API.ExpectedPaymentsPage;
  ModernTreasury.ExternalAccounts = API.ExternalAccounts;
  ModernTreasury.ExternalAccountsPage = API.ExternalAccountsPage;
  ModernTreasury.IncomingPaymentDetails = API.IncomingPaymentDetails;
  ModernTreasury.IncomingPaymentDetailsPage = API.IncomingPaymentDetailsPage;
  ModernTreasury.Invoices = API.Invoices;
  ModernTreasury.InvoicesPage = API.InvoicesPage;
  ModernTreasury.Documents = API.Documents;
  ModernTreasury.DocumentsPage = API.DocumentsPage;
  ModernTreasury.AccountCollectionFlows = API.AccountCollectionFlows;
  ModernTreasury.AccountCollectionFlowsPage = API.AccountCollectionFlowsPage;
  ModernTreasury.AccountDetails = API.AccountDetails;
  ModernTreasury.AccountDetailsPage = API.AccountDetailsPage;
  ModernTreasury.RoutingDetails = API.RoutingDetails;
  ModernTreasury.RoutingDetailsPage = API.RoutingDetailsPage;
  ModernTreasury.InternalAccounts = API.InternalAccounts;
  ModernTreasury.InternalAccountsPage = API.InternalAccountsPage;
  ModernTreasury.Ledgers = API.Ledgers;
  ModernTreasury.LedgersPage = API.LedgersPage;
  ModernTreasury.LedgerableEvents = API.LedgerableEvents;
  ModernTreasury.LedgerAccountCategories = API.LedgerAccountCategories;
  ModernTreasury.LedgerAccountCategoriesPage = API.LedgerAccountCategoriesPage;
  ModernTreasury.LedgerAccounts = API.LedgerAccounts;
  ModernTreasury.LedgerAccountsPage = API.LedgerAccountsPage;
  ModernTreasury.LedgerAccountPayouts = API.LedgerAccountPayouts;
  ModernTreasury.LedgerAccountPayoutsPage = API.LedgerAccountPayoutsPage;
  ModernTreasury.LedgerAccountStatements = API.LedgerAccountStatements;
  ModernTreasury.LedgerEntries = API.LedgerEntries;
  ModernTreasury.LedgerEntriesPage = API.LedgerEntriesPage;
  ModernTreasury.LedgerEventHandlers = API.LedgerEventHandlers;
  ModernTreasury.LedgerEventHandlerListResponsesPage = API.LedgerEventHandlerListResponsesPage;
  ModernTreasury.LedgerTransactions = API.LedgerTransactions;
  ModernTreasury.LedgerTransactionsPage = API.LedgerTransactionsPage;
  ModernTreasury.LineItems = API.LineItems;
  ModernTreasury.LineItemsPage = API.LineItemsPage;
  ModernTreasury.PaymentFlows = API.PaymentFlows;
  ModernTreasury.PaymentFlowsPage = API.PaymentFlowsPage;
  ModernTreasury.PaymentOrders = API.PaymentOrders;
  ModernTreasury.PaymentOrdersPage = API.PaymentOrdersPage;
  ModernTreasury.PaymentReferences = API.PaymentReferences;
  ModernTreasury.PaymentReferencesPage = API.PaymentReferencesPage;
  ModernTreasury.Returns = API.Returns;
  ModernTreasury.ReturnObjectsPage = API.ReturnObjectsPage;
  ModernTreasury.Transactions = API.Transactions;
  ModernTreasury.TransactionsPage = API.TransactionsPage;
  ModernTreasury.Validations = API.Validations;
  ModernTreasury.PaperItems = API.PaperItems;
  ModernTreasury.PaperItemsPage = API.PaperItemsPage;
  ModernTreasury.Webhooks = API.Webhooks;
  ModernTreasury.VirtualAccounts = API.VirtualAccounts;
  ModernTreasury.VirtualAccountsPage = API.VirtualAccountsPage;
})((ModernTreasury = exports.ModernTreasury || (exports.ModernTreasury = {})));
exports = module.exports = ModernTreasury;
exports.default = ModernTreasury;
//# sourceMappingURL=index.js.map
